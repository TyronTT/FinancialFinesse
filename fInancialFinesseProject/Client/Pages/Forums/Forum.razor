@page "/forums/{url}"
@inject fInancialFinesseProject.Client.Services2.IForumService ForumService
@using Markdig
@inject IJSRuntime JSRuntime
@using fInancialFinesseProject.Shared

@if (CurrentPost == null)
{
    <span>Getting that Forum Post from the service...</span>
}
else
{
    <img src="@CurrentPost.Image" />

    <h3>@CurrentPost.Title</h3>

    <div>
        @((MarkupString)Markdown.ToHtml(CurrentPost.Content))
    </div>

    <button @onclick="NavigateToEdit">Edit Post</button>

    <button @onclick="ConfirmDelete">Delete Post</button>

    <div>
        @if (specificCategory != null)
        {
            <h3>@specificCategory.Name (ID: @specificCategory.Id)</h3>
        }
    </div>

    <div class="comments-section">
        <h3>Comments</h3>
        @if (comments.Any())
        {
            foreach (var comment in comments)
            {
                @*<div class="comment">
                    <p><strong>@comment.Author</strong> - @comment.DatePosted.ToString("dd MMM yyyy")</p>
                <p>@comment.Text</p>
                </div>*@
                <p><strong>@comment.Author</strong> - @comment.DatePosted.ToString("dd MMM yyyy")</p>
                <p>@comment.Text</p>
                <button @onclick="() => EditComment(comment)">Edit</button>
                <button @onclick="() => DeleteComment(comment.Id)">Delete</button>
            }
        }
        else
        {
            <p>No comments yet. Be the first to comment!</p>
        }

        <EditForm Model="newComment" OnValidSubmit="AddComment">
            <div class="form-group">
                <label for="author">Name:</label>
                <InputText id="author" class="form-control" @bind-Value="newComment.Author" />
            </div>
            <div class="form-group">
                <label for="comment">Comment:</label>
                <InputTextArea id="comment" class="form-control" @bind-Value="newComment.Text" rows="3"></InputTextArea>
            </div>
            <button type="submit" class="btn btn-primary">Post Comment</button>
        </EditForm>
    </div>
}

@code {
    private fInancialFinesseProject.Shared.ForumPost CurrentPost; //CurrentPost: Holds the data for the currently viewed post.
    private List<ForumComment> comments = new List<ForumComment>(); //comments: A list of comments for the current post.
    private ForumComment newComment = new ForumComment(); //newComment: A model for adding a new comment to the post
    private ForumCategory specificCategory; //specificCategory: Optionally, shows a specific category related to the post.

    [Parameter]
    public string Url { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync() //OnInitializedAsync: Loads the forum post and its comments when the component initializes.
    {
        await LoadForumPost();
        await LoadComments();
    }

    private async Task LoadForumPost() //LoadBlogPost: Fetches the blog post data.
    {
        // Logic to load the blog post
        CurrentPost = await ForumService.GetForumPostbyUrl(Url);
    }

    private void NavigateToEdit() //Navigates to EditForum.razor page
    {
        NavigationManager.NavigateTo($"/editforum/{CurrentPost.Id}");
    }

    private async Task ConfirmDelete() //Double check with user before deleting post
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this Forum?" });
        if (confirmed)
        {
            await DeleteForum();
        }
    }

    private async Task DeleteForum() // Functionality to delete post
    {
        await ForumService.DeleteForumPost(CurrentPost.Id);
        NavigationManager.NavigateTo("/forums");
    }

    private async Task LoadComments() //calls GetCommentsByForumPostId on the BlogService, providing the Id to the post
    {
        comments = await ForumService.GetCommentsByForumPostId(CurrentPost.Id);
    }

    private async Task AddComment() //This method is triggered when a user submits a new comment. It prepares the newComment object by setting its BlogPost or BlogPostId property to associate the comment with the current blog post
    {
        @*newComment.BlogPostId = CurrentPost.Id; // Ensure the comment is associated with the current post
        await BlogService.AddComment(newComment);
        newComment = new BlogComment(); // Reset the comment
        await LoadComments(); // Reload comments*@

        newComment.ForumPost = CurrentPost; 
                                           
        newComment.ForumPostId = CurrentPost.Id; 

        await ForumService.AddComment(newComment);
        newComment = new ForumComment(); // Reset the comment
        await LoadComments(); // Reload comments
    }

    private async Task DeleteComment(int commentId) //functionality to delete comment
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this comment?");
        if (confirmed)
        {
            await ForumService.DeleteComment(commentId);
            await LoadComments();
        }
    }

    private void EditComment(ForumComment comment) //navigate to EditComment page
    {
        NavigationManager.NavigateTo($"/edit-fcomment/{comment.Id}");
    }

    private async Task LoadSpecificCategory() //It uses a hardcoded Id (test = 1) to fetch a category by its ID using BlogService.GetCategoryById(test). The fetched category is then stored in specificCategory
    {
        int test = 1; 
                      
        specificCategory = await ForumService.GetCategoryById(test);
    }
}
