@page "/create"
@inject fInancialFinesseProject.Client.Services.IBlogService BlogService
@inject NavigationManager NavigationManager
@using Markdig
@using fInancialFinesseProject.Shared.Domain


<h3>Create a New Blog Post</h3>

<EditForm Model="@newBlogPost" OnValidSubmit="CreateNewBlogPost">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="author">Author</label>
        <InputText id="author" @bind-Value="newBlogPost.Author" class="form-control" />
        <ValidationMessage For="@(() => newBlogPost.Author)" />
    </div>

    <div class="form-group">
        <label for="category">Category</label>
        <InputSelect id="category" @bind-Value="newBlogPost.CategoryId" class="form-control">
            <option value="">-- Select Category --</option>
            @if (categories != null)
            {
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                    //newBlogPost.Category = category.Name;
                }
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="newBlogPost.Title" class="form-control" />
        <ValidationMessage For="@(() => newBlogPost.Title)" />
    </div>

    <div class="form-group">
        <label for="url">Url</label>
        <InputText id="url" @bind-Value="newBlogPost.Url" class="form-control" />
        <ValidationMessage For="@(() => newBlogPost.Url)" />
    </div>

    <div class="form-control-file">
        <label for="image">Image</label>
        <InputFile OnChange="OnFileChange" />
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="newBlogPost.Description" class="form-control" />
        <ValidationMessage For="@(() => newBlogPost.Description)" />
    </div>

    <div class="form-group">
        <label for="content">Content</label>
        <BlogTextArea id="content" @bind-Value="newBlogPost.Content" class="form-control" />
        <ValidationMessage For="@(() => newBlogPost.Content)" />
    </div>

    <div class="form-group">
        <label for="contentPreview">Content Preview</label>
        <div id="contentPreview" style="height: 100%" class="form-control">@((MarkupString)Markdown.ToHtml(newBlogPost.Content))</div>
    </div>

    <div class="form-group">
        <label for="date">Date</label>
        <InputDate id="date" @bind-Value="newBlogPost.DateCreated" class="form-control" />
    </div>

    @*<div class="form-check">
        <InputCheckbox id="isPublished" @bind-Value="newBlogPost.IsPublished" class="form-check-input" />
        <label for="isPublished">Publish</label>
    </div>*@

    <button type="submit" class="btn btn-primary">Create</button>
    <ValidationSummary />
</EditForm>

@code {
    fInancialFinesseProject.Shared.Domain.BlogPost newBlogPost = new fInancialFinesseProject.Shared.Domain.BlogPost //newBlogPost: Holds the data for the new blog post being created.
        {
            Image = ""
        };

    private List<BlogCategory> categories; //categories: A list of available categories to assign to the blog post.
    //private IList<BlogCategory>? categories;

    protected override async Task OnInitializedAsync() //OnInitializedAsync: Loads the categories from the backend when the component initializes.
    {
        categories = await BlogService.GetCategories();
    }

    async Task CreateNewBlogPost() //CreateNewBlogPost: Called when the form is submitted. It creates the new blog post through BlogService and redirects to the newly created post's page.
    {
        var result = await BlogService.CreateNewBlogPost(newBlogPost);
        NavigationManager.NavigateTo($"posts/{result.Url}");
    }

    async Task OnFileChange(InputFileChangeEventArgs e) //OnFileChange: Handles image file uploads, resizing the image and converting it to a base64 string to be stored in newBlogPost.Image.
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 1060, 1060);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        newBlogPost.Image = imageData;
    }
}