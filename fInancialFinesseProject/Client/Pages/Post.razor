@page "/posts/{url}"
@inject fInancialFinesseProject.Client.Services.IBlogService BlogService
@using Markdig
@inject IJSRuntime JSRuntime
@using fInancialFinesseProject.Shared.Domain

@if (CurrentPost == null)
{
    <span>Getting that Blog Post from the service...</span>
}
else
{
    <h3>@CurrentPost.Title</h3>

    //<div class="post-img" style="background-image: url('@CurrentPost.Image ?? placeholderImage)');" />
    <img src="@CurrentPost.Image" />

    <div>
        @((MarkupString)Markdown.ToHtml(CurrentPost.Content))
    </div>

    <button @onclick="NavigateToEdit">Edit Post</button>

    <button @onclick="ConfirmDelete">Delete Post</button>

    <div>
        @if (specificCategory != null)
        {
            <h3>@specificCategory.Name (ID: @specificCategory.Id)</h3>
        }
    </div>

    <div class="comments-section">
        <h3>Comments</h3>
        @if (comments.Any())
        {
            foreach (var comment in comments)
            {
                @*<div class="comment">
                    <p><strong>@comment.Author</strong> - @comment.DatePosted.ToString("dd MMM yyyy")</p>
                    <p>@comment.Text</p>
                  </div>*@
                <p><strong>@comment.Author</strong> - @comment.DatePosted.ToString("dd MMM yyyy")</p>
                <p>@comment.Text</p>
                <button @onclick="() => EditComment(comment)">Edit</button>
                <button @onclick="() => DeleteComment(comment.Id)">Delete</button>
            }
        }
        else
        {
            <p>No comments yet. Be the first to comment!</p>
        }

        <EditForm Model="newComment" OnValidSubmit="AddComment">
            <div class="form-group">
                <label for="author">Name:</label>
                <InputText id="author" class="form-control" @bind-Value="newComment.Author" />
            </div>
            <div class="form-group">
                <label for="comment">Comment:</label>
                <InputTextArea id="comment" class="form-control" @bind-Value="newComment.Text" rows="3"></InputTextArea>
            </div>
            <button type="submit" class="btn btn-primary">Post Comment</button>
        </EditForm>
    </div>
}

@code {
    private fInancialFinesseProject.Shared.Domain.BlogPost CurrentPost;
    private List<BlogComment> comments = new List<BlogComment>();
    private BlogComment newComment = new BlogComment();
    private BlogCategory specificCategory;

    [Parameter]
    public string Url { get; set; }

    string placeholderImage = "https://loremflickr.com/1060/300";

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadBlogPost();
        await LoadComments();
        //await LoadSpecificCategory();
    }

    private async Task LoadBlogPost()
    {
        // Logic to load the blog post
        CurrentPost = await BlogService.GetBlogPostByUrl(Url);
    }

    private void NavigateToEdit()
    {
        NavigationManager.NavigateTo($"/edit/{CurrentPost.Id}");
    }

    private async Task ConfirmDelete()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this Blog?" });
        if (confirmed)
        {
            await DeletePost();
        }
    }

    private async Task DeletePost()
    {
        await BlogService.DeleteBlogPost(CurrentPost.Id);
        NavigationManager.NavigateTo("/");
    }

    private async Task LoadComments()
    {
        comments = await BlogService.GetCommentsByBlogPostId(CurrentPost.Id);
    }

    private async Task AddComment()
    {
        @*newComment.BlogPostId = CurrentPost.Id; // Ensure the comment is associated with the current post
        await BlogService.AddComment(newComment);
        newComment = new BlogComment(); // Reset the comment
        await LoadComments(); // Reload comments*@

        newComment.BlogPost = CurrentPost; // Make sure CurrentPost is the correct BlogPost object
                                           // Or set only the required fields
        newComment.BlogPostId = CurrentPost.Id; // If only the ID is sufficient

        await BlogService.AddComment(newComment);
        newComment = new BlogComment(); // Reset the comment
        await LoadComments(); // Reload comments
    }


    private async Task DeleteComment(int commentId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this comment?");
        if (confirmed)
        {
            await BlogService.DeleteComment(commentId);
            await LoadComments();
            //await LoadSpecificCategory();
        }
    }

    private void EditComment(BlogComment comment)
    {
        NavigationManager.NavigateTo($"/edit-comment/{comment.Id}");
    }

    private async Task LoadSpecificCategory()
    {
        int test = 1; // Assuming you have the ID you want to search for
                      // You need a method in your BlogService to fetch a category by ID
        specificCategory = await BlogService.GetCategoryById(test);
    }
}
